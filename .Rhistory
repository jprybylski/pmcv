nonmemboxcox(rnorm(100,1,0.3), lambda=0)
nonmemboxcox(rnorm(100,1,0.3), lambda=0)
nonmemboxcox(rnorm(100,0,0.3), lambda=0)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
test_mean <- runif(1, 0.1, 10)
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(10^6, mean=log(test_mean), sd=runif(1, 0.1, 2)))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- nonmemboxcox(test_x, test_lambda)
lm_obj <- lm(test_boxcox ~ 1)
# Use MASS boxcox regression to determine lambda by other method
b <- MASS::boxcox(lm_obj)
devtools::test()
test_mean <- runif(1, 0.1, 10)
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(10^6, mean=log(test_mean), sd=runif(1, 0.1, 2)))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
lm_obj <- lm(test_boxcox ~ 1)
# Use MASS boxcox regression to determine lambda by other method
b <- MASS::boxcox(lm_obj)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
test_mean <- runif(1, 0.1, 10)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^1
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(test_sd, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
test_mean <- runif(1, 0.1, 10)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^1
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(test_sd, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
test_mean <- runif(1, 0.1, 10)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^1
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(test_sd, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
test_mean <- runif(1, 0.1, 10)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^1
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(test_sd, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
test_mean <- runif(1, 0.1, 10)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^1
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(test_sd, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
test_mean <- runif(1, 0.1, 10)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^1
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(test_sd, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
test_mean <- runif(1, 0.1, 10)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^1
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(test_sd, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
test_mean <- runif(1, 0.1, 10)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^1
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(test_sd, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
test_mean <- runif(1, 0.1, 10)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^1
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(test_sd, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
test_mean <- runif(1, 0.1, 10)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^1
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(test_sd, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
test_mean <- runif(1, 0.1, 10)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^1
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(samp_n, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
test_mean <- runif(1, 0.1, 10)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^1
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(samp_n, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
test_mean <- runif(1, 0.1, 10)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^1
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(samp_n, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
test_mean <- runif(1, 0.1, 10)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^1
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(samp_n, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
test_mean <- runif(1, 0.1, 10)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^1
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(samp_n, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
test_mean <- runif(1, 0.1, 10)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^1
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(samp_n, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
test_mean <- runif(1, 10, 100)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^1
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(samp_n, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
test_mean <- runif(1, 10, 100)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^1
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(samp_n, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
test_mean <- runif(1, 10, 100)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^1
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(samp_n, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
test_mean <- runif(1, 10, 100)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^6
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(samp_n, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
lm_obj <- lm(test_boxcox ~ 1)
# Use MASS boxcox regression to determine lambda by other method
b <- MASS::boxcox(lm_obj)
test_mean <- runif(1, 10, 100)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^6
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(samp_n, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
lm_obj <- lm(test_boxcox ~ 1)
# Use MASS boxcox regression to determine lambda by other method
b <- MASS::boxcox(lm_obj)
test_mean <- runif(1, 10, 100)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^6
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(samp_n, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
lm_obj <- lm(test_boxcox ~ 1)
# Use MASS boxcox regression to determine lambda by other method
b <- MASS::boxcox(lm_obj)
test_mean <- runif(1, 10, 100)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^6
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(samp_n, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- nonmemboxcox(test_x, test_lambda)
lm_obj <- lm(test_boxcox ~ 1)
# Use MASS boxcox regression to determine lambda by other method
b <- MASS::boxcox(lm_obj)
test_mean <- runif(1, 10, 100)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^6
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(samp_n, mean=log(test_mean), sd=test_sd))/test_mean
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
lm_obj <- lm(test_boxcox ~ 1)
# Use MASS boxcox regression to determine lambda by other method
b <- MASS::boxcox(lm_obj)
test_mean <- runif(1, 10, 100)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^6
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(samp_n, mean=log(test_mean), sd=test_sd))
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
lm_obj <- lm(test_boxcox ~ 1)
# Use MASS boxcox regression to determine lambda by other method
b <- MASS::boxcox(lm_obj)
est_lambda <- b$x[which.max(b$y)]
test_mean <- runif(1, 10, 100)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^6
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(samp_n, mean=log(test_mean), sd=test_sd))
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
lm_obj <- lm(test_boxcox ~ 1)
# Use MASS boxcox regression to determine lambda by other method
b <- MASS::boxcox(lm_obj)
est_lambda <- b$x[which.max(b$y)]
test_mean <- runif(1, 10, 100)
test_sd <- runif(1, 0.1, 2)
samp_n <- 10^6
# x is list of centered "etas" (all positive)
test_x <- exp(rnorm(samp_n, mean=log(test_mean), sd=test_sd))
test_lambda <- runif(1, -2, 2)
test_boxcox <- exp(nonmemboxcox(test_x, test_lambda))
lm_obj <- lm(test_boxcox ~ 1)
# Use MASS boxcox regression to determine lambda by other method
b <- MASS::boxcox(lm_obj)
est_lambda <- b$x[which.max(b$y)]
seq(-2,2,0.1) %>% sapply(function(l) nonmemboxcox(10, lambda=l))
devtools::test()
MASS::boxcox(1:10, lambda=1)
c(1:10) %>% {(.^1 - 1)/1}
c(1:10) %>% {(.^0.5 - 1)/0.5}
rlnorm(10) %>% {(.^0.5 - 1)/0.5}
rlnorm(10) %>% {(.^0.5 - 1)/0.5} %>% exp()
rlnorm(10) %>% {print(.) %>% .} %>% {(.^0.5 - 1)/0.5} %>% exp()
rlnorm(10) %>% {print(.); .} %>% {(.^0.5 - 1)/0.5} %>% exp()
rlnorm(10) %>% {print(.); .} %>% {(.^(-1) - 1)/(-1)} %>% exp()
devtools::test()
sqrt(log((expected_cv/100)^2 + 1))
sqrt(log((30/100)^2 + 1))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test_coverage()
devtools::test()
devtools::install()
devtools::build()
devtools::document()
devtools::install()
?pmxcv::nonmemboxcox
devtools::test_coverage()
devtools::test()
devtools::test_coverage()
devtools::test()
devtools::test()
devtools::test()
?expect_equal
devtools::test()
devtools::test()
devtools::test_coverage()
dist.intcv("nmboxcox", u=4, v=0.5, lambda=1)
dist.intcv("nmboxcox", u=4, v=0.5, lambda=1)
dist.intcv("nmboxcox", u=10, v=0.5, lambda=1)
dist.intcv("nmboxcox", u=2, v=0.5, lambda=1)
numcv(exp(nonmemboxcox(rlnorm(1000, log(10) sqrt(0.5)), lambda=1)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(10), sqrt(0.5)), lambda=1)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(10), sqrt(0.5)), lambda=1)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(10), sqrt(0.5)), lambda=1)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(10), sqrt(0.5)), lambda=1)))
exp(nonmemboxcox(rlnorm(1000, log(10), sqrt(0.5)), lambda=1))
exp(nonmemboxcox(rlnorm(1000, log(10), sqrt(0.5)), lambda=-1))
numcv(exp(nonmemboxcox(rlnorm(1000, log(10), sqrt(0.5)), lambda=-1, theta=10)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(10), sqrt(0.5)), lambda=-1, theta=10)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(10), sqrt(0.5)), lambda=-1, theta=10)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(10), sqrt(0.5)), lambda=-1, theta=10)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(10), sqrt(0.5)), lambda=1, theta=10)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(10), sqrt(0.5)), lambda=1, theta=10)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(10), sqrt(0.5)), lambda=1, theta=10)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(10), sqrt(0.5)), lambda=1, theta=10)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(10), sqrt(0.5)), lambda=-1, theta=10)))
numcv(rlnorm(1000, log(10), sqrt(0.5)))
numcv(rlnorm(1000, log(10), sqrt(0.5)))
numcv(rlnorm(1000, log(1), sqrt(0.5)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(10), sqrt(0.5)), lambda=-1, theta=10)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(10), sqrt(0.5)), lambda=-1, theta=10)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(10), sqrt(0.5)), lambda=-1, theta=10)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(1), sqrt(0.5)), lambda=-1, theta=1)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(50), sqrt(0.5)), lambda=-1, theta=50)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(50), sqrt(0.5)), lambda=-1, theta=50)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(50), sqrt(0.5)), lambda=-1, theta=50)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(50), sqrt(0.5)), lambda=-1, theta=50)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(50), sqrt(0.5)), lambda=-1, theta=50)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(50), sqrt(0.5)), lambda=1, theta=50)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(50), sqrt(0.5)), lambda=1, theta=50)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(50), sqrt(0.5)), lambda=1, theta=50)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(50), sqrt(0.5)), lambda=1, theta=50)))
numcv(exp(nonmemboxcox(rlnorm(1000, log(50), sqrt(0.5)), lambda=1, theta=50)))
numcv(exp(nonmemboxcox(rlnorm(10^6, log(50), sqrt(0.5)), lambda=1, theta=50)))
numcv(exp(nonmemboxcox(rlnorm(10^6, log(50), sqrt(0.5)), lambda=1, theta=50)))
numcv(exp(nonmemboxcox(rlnorm(10^6, log(50), sqrt(0.5)), lambda=1, theta=50)))
numcv(exp(nonmemboxcox(rlnorm(10^6, log(50), sqrt(0.5)), lambda=1, theta=50)))
numcv(exp(nonmemboxcox(rlnorm(10^6, log(50), sqrt(0.5)), lambda=1, theta=50)))
devtools::install()
dist.intcv("nmboxcox", u=10, v=0.5, lambda=1, theta=1)
devtools::install()
devtools::document()
devtools::install()
pmxcv::dist.intcv("nmboxcox", u=10, v=0.5, lambda=-1)
pmxcv::dist.intcv("nmboxcox", u=10, v=0.5, lambda=1)
pmxcv::dist.intcv("nmboxcox", u=10, v=0.5, lambda=1)
pmxcv::dist.intcv("nmboxcox", u=10, v=0.5, lambda=-0.1)
pmxcv::dist.intcv("nmboxcox", u=0.1, v=0.5, lambda=-0.1)
pmxcv::dist.intcv("nmboxcox", u=0.1, v=0.5, lambda=-0.8)
pmxcv::dist.intcv("nmboxcox", u=0.1, v=0.5, lambda=-0.5)
pmxcv::dist.intcv("nmboxcox", u=0.1, v=0.5, lambda=2)
pmxcv::dist.intcv("nmboxcox", u=5, v=0.5, lambda=2)
pmxcv::dist.intcv("nmboxcox", u=10, v=0.5, lambda=2)
pmxcv::dist.intcv("nmboxcox", u=0.001, v=0.5, lambda=2)
pmxcv::dist.intcv("nmboxcox", u=0.001, v=0.5, lambda=-1)
pmxcv::dist.intcv("logit",u=0.2,v=0.8)
pmxcv::dist.intcv("logit",u=0.2,v=0.8)
pmxcv::dist.intcv("logit",u=0.2,v=0.8)
pmxcv::dist.intcv("logit",u=0.2,v=0.8)
pmxcv::dist.intcv("logit",u=0.2,v=3)
pmxcv::dist.intcv("logit",u=0.3,v=3)
pmxcv::dist.intcv("nmboxcox",u=0.3,v=3,lamba=3)
pmxcv::dist.intcv("nmboxcox",u=0.3,v=3,lambda=3)
pmxcv::dist.intcv("nmboxcox",u=0.3,v=3,lambda=3)
pmxcv::dist.intcv("nmboxcox",u=0.3,v=3,lambda=3)
pmxcv::dist.intcv("nmboxcox",u=3,v=3,lambda=3)
pmxcv::dist.intcv("nmboxcox",u=100,v=3,lambda=3)
pmxcv::dist.intcv("nmboxcox",u=100,v=3,lambda=-6)
pmxcv::dist.intcv("nmboxcox",u=100,v=3,lambda=-5)
pmxcv::dist.intcv("nmboxcox",u=100,v=3,lambda=-1)
pmxcv::dist.intcv("nmboxcox",u=100,v=3,lambda=-2)
pmxcv::dist.intcv("nmboxcox",u=100,v=3,lambda=-3)
pmxcv::dist.intcv("nmboxcox",u=100,v=3,lambda=-3)
pmxcv::dist.intcv("nmboxcox",u=100,v=3,lambda=-3)
pmxcv::dist.intcv("nmboxcox",u=300,v=3,lambda=-3)
pmxcv::dist.intcv("nmboxcox",u=3,v=3,lambda=-3)
pmxcv::dist.intcv("logexp",u=0.3,v=3)
pmxcv::dist.intcv("logexp",u=0.3,v=3)
pmxcv::dist.intcv("logexp",u=0.3,v=0.5)
pmxcv::dist.intcv("logexp",u=0.3,v=0.5)
pmxcv::dist.intcv("log",u=0.3,v=0.5)
pmxcv::dist.intcv("log",u=0.3,v=0.5)
pmxcv::dist.intcv("logexp",u=0.3,v=0.5)
pmxcv::dist.intcv("logexp",u=0,v=0.5)
pmxcv::dist.intcv("logexp",u=0,v=0.5)
pmxcv::dist.intcv("logexp",u=-0.5,v=0.5)
pmxcv::dist.intcv("logexp",u=-0.5,v=0.5)
theta_bio <- 0.689
omega_bio <- 1.2
# Representation of bioavailability calculation in NONMEM syntax:L
# LOGITF1 = LOG( THETA(BIO) ) - LOG( 1 - THETA(BIO) )
# F1 = 1/( 1 + 1/EXP( LOGITF1 + ETA(BIO) )
## Expected parameter variability
eta_sample <- rnorm(10^6, sd=sqrt(omega_bio))
logit_theta <- log(theta_bio) - log( 1 - theta_bio )
indiv_bios <- 1 / ( 1 + 1/exp( logit_theta + eta_sample ) )
expected_cv <- 100*sd(indiv_bios)/mean(indiv_bios)
bio_cv_lnorm <- 100*sqrt(exp(omega_bio) - 1)
library(pmxcv)
## Parameters from NONMEM (etc)
theta_bio <- 0.689
omega_bio <- 1.2
# Representation of bioavailability calculation in NONMEM syntax:L
# LOGITF1 = LOG( THETA(BIO) ) - LOG( 1 - THETA(BIO) )
# F1 = 1/( 1 + 1/EXP( LOGITF1 + ETA(BIO) )
## Expected parameter variability
eta_sample <- rnorm(10^6, sd=sqrt(omega_bio))
logit_theta <- log(theta_bio) - log( 1 - theta_bio )
indiv_bios <- 1 / ( 1 + 1/exp( logit_theta + eta_sample ) )
expected_cv <- 100*sd(indiv_bios)/mean(indiv_bios)
expected_cv # 31.4%
## Lognormal reported CV% (erroneous)
bio_cv_lnorm <- 100*sqrt(exp(omega_bio) - 1) # 152%
## Lognormal reported CV% (erroneous)
bio_cv_lnorm <- dist.intcv("logit", u=theta_bio, v=omega_bio)
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
devtools::install_github("pfizer-rd/pmxcv")
devtools::test()
usethis::use_test("dist_builtins")
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
dist.intcv("logexp",u=-0.5, v=3)
dist.intcv("logexp",u=-0.5, v=3)
dist.intcv("logexp",u=-0.5, v=3)
dist.intcv("logexp",u=-0.5, v=3)
dist.intcv("logexp",u=-0.5, v=3)
dist.intcv("logexp",u=-0.5, v=3)
dist.intcv("logexp",u=-0.5, v=3)
dist.intcv("logexp",u=-0.5, v=3)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
gc()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
dist.moment("logexp", u=-0.5, v=rand_var, n=1)
dist.moment("logexp", u=-0.5, v=0.5, n=1)
plogis(3)
1/(1 + exp(3))
1/(1 + 1/exp(3))
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
1/(1 + 1/exp(3))
devtools::test()
devtools::test()
gc()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test_coverage()
devtools::test()
devtools::test_coverage()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test_coverage()
usethis::use_test("inverse_cv")
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test_coverage()
devtools::test_coverage()
devtools::document()
devtools::install()
?pmxcv::numcv
devtools::document()
devtools::install()
?pmxcv::numcv
devtools::test()
devtools::build(path=dirname(file.choose()))
devtools::install()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
